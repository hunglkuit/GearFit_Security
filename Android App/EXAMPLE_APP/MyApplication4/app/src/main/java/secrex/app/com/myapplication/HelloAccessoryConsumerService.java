package secrex.app.com.myapplication;import java.io.IOException;import android.content.Intent;import android.os.Binder;import android.os.Handler;import android.os.IBinder;import android.util.Log;import android.widget.Toast;import secrex.app.com.myapplication.R;import secrex.app.com.myapplication.MyActivity;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.SA;import com.samsung.android.sdk.accessory.SAAgent;import com.samsung.android.sdk.accessory.SAPeerAgent;import com.samsung.android.sdk.accessory.SASocket;public class HelloAccessoryConsumerService extends SAAgent {	public static final int HELLOACCESSORY_CHANNEL_ID = 104;	@Override	protected void onError(SAPeerAgent peerAgent, String errorMessage, int errorCode) {		super.onError(peerAgent, errorMessage, errorCode);	}	private final IBinder mBinder = new LocalBinder();	Handler mHandler = new Handler();	public class LocalBinder extends Binder {		public HelloAccessoryConsumerService getService() {			return HelloAccessoryConsumerService.this;		}	}	private SASocket mConnectionHandler;	public class HelloAccessoryConsumerConnection extends SASocket {		public HelloAccessoryConsumerConnection() {			super(HelloAccessoryConsumerConnection.class.getName());		}		@Override		public void onError(int channelId, String errorMessage, int errorCode) {		}		@Override		public void onReceive(int channelId, byte[] data) {			final String strToUpdateUI = new String(data);			mHandler.post(new Runnable() {				@Override				public void run() {                    Log.d("My Log",strToUpdateUI);				}			});		}        @Override        public SAPeerAgent getConnectedPeerAgent() {            return super.getConnectedPeerAgent();        }        @Override		protected void onServiceConnectionLost(int reason) {			closeConnection();		}	}    public HelloAccessoryConsumerService() {        super("HelloAccessoryConsumerService", HelloAccessoryConsumerConnection.class);    }	public void findPeers() {		findPeerAgents();	}    @Override    public void onCreate() {        super.onCreate();                SA mAccessory = new SA();        try {        	mAccessory.initialize(this);                    } catch (SsdkUnsupportedException e) {        	// Error Handling        } catch (Exception e1) {            e1.printStackTrace();			/*			 * Your application can not use Accessory package of Samsung Mobile			 * SDK. You application should work smoothly without using this SDK,			 * or you may want to notify user and close your app gracefully			 * (release resources, stop Service threads, close UI thread, etc.)			 */            stopSelf();        }    }		        @Override     protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {         acceptServiceConnectionRequest(peerAgent);     }     		@Override	protected void onFindPeerAgentResponse(SAPeerAgent remoteAgent, int result) {		if (result == PEER_AGENT_FOUND) {            onPeerFound(remoteAgent);        }	}	@Override	protected void onServiceConnectionResponse(SAPeerAgent peerAgent, SASocket thisConnection,			int connResult) {		if (connResult == CONNECTION_SUCCESS) {			this.mConnectionHandler = thisConnection;			Toast.makeText(getBaseContext(), "Connection has already initialed",					Toast.LENGTH_LONG).show();		} else if (connResult == CONNECTION_ALREADY_EXIST) {			Toast.makeText(getBaseContext(), "Connection has already initialed",					Toast.LENGTH_LONG).show();		} else {			Toast.makeText(getBaseContext(), "Connection Fail",					Toast.LENGTH_LONG).show();		}	}	@Override	public IBinder onBind(Intent intent) {				return mBinder;	}	public boolean sendHelloAccessory() {		boolean retvalue = false;		String jsonStringToSend = "Hello Accessory!";		if (mConnectionHandler != null) {			try {				mConnectionHandler.send(HELLOACCESSORY_CHANNEL_ID,						jsonStringToSend.getBytes());				retvalue = true;			} catch (IOException e) {				e.printStackTrace();			}		}		return retvalue;	}	public void onPeerFound(SAPeerAgent remoteAgent) {		if (remoteAgent != null) {			establishConnection(remoteAgent);		} else {			Toast.makeText(getApplicationContext(), "Cannot find any peer",					Toast.LENGTH_LONG).show();		}	}	public boolean closeConnection() {		if (mConnectionHandler != null) {			mConnectionHandler.close();			mConnectionHandler = null;		}		return true;	}	public boolean establishConnection(SAPeerAgent peerAgent) {		if (peerAgent != null) {			requestServiceConnection(peerAgent);			return true;		}		return false;	}}